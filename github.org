#+TITLE:   github projects by j-a-r-i
#+AUTHOR:  Jari Ojanen
#+OPTIONS: H:4 num:nil toc:2 p:t
#+SETUPFILE: ~/omat/org-html-themes/setup/theme-readtheorg.setup

* Overview
** Links

See also:
 - [[https://developer.mbed.org/users/jari/code/][mbed]] repositories
 - [[http://www.github.com/j-a-r-i][github]] repositories
 - [[http://www.saunalahti.fi/~jarijoja/][Android applications]]
 - [[https://susestudio.com/u/jojanen2][Suse studio]]
 - [[https://launchpad.net/~j-a-r-i][Ubuntu launchpad]] (empty)
 - [[https://www.npmjs.com/~j-a-r-i][NPM]] (empty)

** Home automation system

These projects can be found at [[http://www.github.com/j-a-r-i][github]] or visual studio online.

*** New architecture

#+begin_src plantuml :file uml1b.png
skinparam componentStyle uml2

package Browser {
   [HaDash] <<elm>>
}

package PC {
   [HaMonitor] <<C#>>
}

package RaspberryPI {
   [HaServer] <<NodeJS>>
   [QHwInterface]  <<C++>>

   interface HttpServer
   interface WsServer
   interface mqtt

   component [mosquitto] #LightGrey
   component [QtBluetooth] #LightGrey
   component [QtSerial] #LightGrey
   component [QtWebSocket] #LightGrey

   [HaDash] .down.> WsServer
   [HaServer] .down.> mqtt : use
   [QtWebSocket] .up.> mqtt : use

   [mosquitto] -right- mqtt

   HttpServer -down- [HaServer]
   WsServer -down- [HaServer]
   [QHwInterface] -down-> [QtBluetooth] : use
   [QHwInterface] -down-> [QtSerial] : use
   [QHwInterface] -up-> [QtWebSocket] : use
}

package TvServer {
   interface HTSP
   component [TvHeadEnd] #LightGrey
   HTSP -down- [TvHeadEnd]
}

package MspLaunchpad {
   component [Energia] #LightGrey
   [FW1]
   [FW1] -down-> [Energia]
}

[drivers]

package Stm32F0Discovery {
   component [FreeRTOS] #LightGrey
   component [Stm32HAL] #LightGrey
   [StmMeasure]
   [StmMeasure] -down-> [FreeRTOS]
   [StmMeasure] -down-> [Stm32HAL]
   [StmMeasure] -down-> [drivers]
   [drivers]
}

package PSoc4BLE {
   [psoc]
   [drivers]

   [psoc] -down-> [drivers]
}

package Stm32Nucleo {
   component [mbed] #LightGrey
   [FW4]
   [FW4] -down-> [mbed]
}

cloud {
   [Telldus] #LightGrey
}
cloud {
   [dweet.io] #LightGrey
}
cloud {
   [FMI] #LightGrey
}
cloud {
   [Nasdaq] #LightGrey
}

HttpServer .up.> [HaDash]
[HaServer] .up.> HTSP : use
[HaServer] -> [dweet.io]
[HaServer] -> [FMI]
[HaServer] -> [Nasdaq]
[HaServer] -> [Telldus]
[QHwInterface] -- [FW1] : UART
[QHwInterface] -- [StmMeasure]
[QtBluetooth] -- [psoc]
[QHwInterface] -- [FW4]

[HaMonitor] .down.> mqtt
[HaMonitor] .down.> WsServer

#+end_src

#+RESULTS:
[[file:uml1b.png]]

*** Old architecture

#+begin_src plantuml :file uml1.png
skinparam componentStyle uml2

package Browser {
   [ReportHtml] <<Html>>
   [Report] <<JScript>>

   [ReportHtml] .down.> [Report]  
}

package PC {
   [HaMonitor] <<C#>>
}

package RaspberryPI {
   [HaGUI] <<NodeJS>>
   [HwIF]  <<C++>>

   interface HttpServer
   interface WsServer
   interface mqtt
   interface RedisApi

   component [BLUEZ] #LightGrey
   component [rapidJSON] #LightGrey
   component [PahoMqttC] #LightGrey
   component [mosquitto] #LightGrey
   component [redis] #LightGrey
   component [PluginTelldus]

   [Report] .down.> WsServer
   [HaGUI] .down.> mqtt : use
   [HaGUI] .down.> RedisApi : use
   [PahoMqttC] .up.> mqtt : use

   [mosquitto] -right- mqtt
   [redis] -right- RedisApi

   HttpServer -down- [HaGUI]
   WsServer -down- [HaGUI]
   [HwIF] -up-> [PahoMqttC] : use
   [HwIF] -down-> [BLUEZ] : use
   [HwIF] -left-> [rapidJSON] : use
}

package VdrServer {
   interface SVDRP
   component [VDR] #LightGrey
   SVDRP -down- [VDR]
}

package MspLaunchpad {
   component [Energia] #LightGrey
   [FW1]
   [FW1] -down-> [Energia]
}

[drivers]

package Stm32F0Discovery {
   component [FreeRTOS] #LightGrey
   component [Stm32HAL] #LightGrey
   [StmMeasure]
   [StmMeasure] -down-> [FreeRTOS]
   [StmMeasure] -down-> [Stm32HAL]
   [StmMeasure] -down-> [drivers]
   [drivers]
}

package PSoc4BLE {
   [psoc]
   [drivers]

   [psoc] -down-> [drivers]
}

package Stm32Nucleo {
   component [mbed] #LightGrey
   [FW4]
   [FW4] -down-> [mbed]
}

cloud {
   [Telldus] #LightGrey
}
cloud {
   [dweet.io] #LightGrey
}
cloud {
   [FMI] #LightGrey
}
cloud {
   [Nasdaq] #LightGrey
}

HttpServer ..> [ReportHtml]
[HaGUI] .up.> SVDRP : use
[HaGUI] -> [dweet.io]
[HaGUI] -> [FMI]
[HaGUI] -> [Nasdaq]
[HaGUI] -> [PluginTelldus]
[QHwInterface] -- [FW1] : UART
[QHwInterface] -- [StmMeasure]
[QtBluetooth] -- [psoc]
[QHwInterface] -- [FW4]

[PluginTelldus] -up-> [Telldus]
[HaMonitor] .up.> WsServer
[HaMonitor] .up.> mqtt
#+end_src

#+RESULTS:
[[file:uml1.png]]

* PC

OS: Windows

** HaMonitor

Windows WPF based debugging application for monitoring 
MQTT messages and REDIS database contents.

[[file:screenshot01.png]]

Packages:
 - [[https://m2mqtt.wordpress.com/][M2Mqtt.Net]]
 - [[http://www.oxyplot.org/][OxyPlot]]
 - [[https://github.com/StackExchange/StackExchange.Redis][StackExchange.Redis]]
 - [[http://www.newtonsoft.com/json][Json.Net]]
 - [[https://github.com/sta/websocket-sharp][websocket-sharp]]
 

* Raspberry PI

OS: buildroot/Raspbian (used to be custom yocto)

** HaDASH frontend (WIP)

Language: [[http://elm-lang.org/][elm]]  (Compiled to JavaScript runs in browser)

Packages:
 - [[https://developers.google.com/chart/][google charts]]

** HaServer

Language: [[https://nodejs.org/en/][NodeJS]] ES6 (plans for ES7 async/await)

Packages:
 - [[https://github.com/websockets/ws][WS websocket library]]
 - sax
 - mqtt

** QHwInterface

Home automation hardware interface application.

Language: Qt (utilize modern C++)

Libraries:
 - [[http://doc.qt.io/qt-5/qtbluetooth-index.html][QtBluetooth]]
 - [[http://doc.qt.io/qt-5/qtserialport-index.html][QtSerialport]]
 - [[http://doc.qt.io/qt-5/qtwebsockets-index.html][QtWebsockets]]


** HaGUI frontend (old)

Packages:
 - [[http://gulpjs.com/][gulp]]
 - [[https://github.com/kriskowal/q][q]] 0.9.2
 - [[https://angularjs.org/][angularjs]] 1.4.9
 - [[https://developers.google.com/chart/][google charts]]

** HaGUI backend (old)

Home automation dashboard application.

Language: [[https://nodejs.org/en/][NodeJS]]

Packages:
 - [[https://github.com/websockets/ws][WS websocket library]]
 - [[https://github.com/Leonidas-from-XIV/node-xml2js][xml2js]]
 - [[https://github.com/ciaranj/node-oauth][oauth]]
 - [[http://jasmine.github.io/2.4/introduction.html][jasmine for unit testing]]

Possible:
 - [[https://github.com/tj/co][co]]

** HwIF (old)

Home automation hardware interface application.

Language: Modern C++

Libraries:
 - http://rapidjson.org/
 - http://sqlite.org/c3ref/objlist.html
 - http://www.bluez.org/

Possible libraries:
 - https://github.com/libuv/libuv
 - https://www.zaphoyd.com/websocketpp/
 - http://pocoproject.org/

* MSP430 launchpad

Processor: MSP430G2553
OS: [[http://energia.nu/reference/][Energia]]

** FW1

Language: arduino (C++)

* STM32F0 discovery

Processor: STM32F051RB
OS: [[http://www.freertos.org/a00106.html][FreeRTOS]] + [[https://www.google.com/url?sa=t&rct=j&q=&esrc=s&source=web&cd=2&cad=rja&uact=8&ved=0ahUKEwjBxvT7qpvMAhVI3CwKHTIrDOUQFggkMAE&url=http%3A%2F%2Fwww.st.com%2Fst-web-ui%2Fstatic%2Factive%2Fen%2Fresource%2Ftechnical%2Fdocument%2Fuser_manual%2FDM00122015.pdf&usg=AFQjCNG895hlKo_IJvrrs0efTC0_bu4iXw][STM32F0 HAL]]

** StmMeasure

Language: C

* Cypress PSOC 4 BLE

Processor:
OS: ???

** PSOC

Language: C

* STM32F0 nucleo

[[https://developer.mbed.org]]

Processor: STM32F072RB
OS: mbed 2.0

** FW4

Language: C++
* CodeGen

1. Collect data from several sources:

| Format      | File format                    | Status  |
|-------------+--------------------------------+---------|
| source code | sources -> doxygen -> xml file | -       |
| uml model   | xmi file                       | -       |
| org-mode    | .org                           | initial |
| excel sheet | xml                            | -       |

2. Combine and process the data

3. Generate source code for
 - C#
 - C++
 - C 
 - Java


#+BEGIN_SRC dot :file pic01.png :cmdline -Kdot -Tpng
digraph {
rankdir=LR;

subgraph cluster1 {
label="sources"
Cpp[label="C++"; shape=box]
CS[label="C#"; shape=box]
Java[label="Java"; shape=box]
C[label="C"; shape=box]
}

node [shape=box]; C_source; xmi; xml; OrgMode; xlsx
node [shape=circle]; doxygen; CodeGen; UmlTool; Excel; Emacs;

C_source -> doxygen -> xml -> CodeGen
UmlTool -> xmi -> CodeGen
Emacs -> OrgMode -> CodeGen
Excel -> xlsx -> CodeGen

CodeGen -> {CS Cpp Java C}
}
#+END_SRC 

#+RESULTS:
[[file:pic01.png]]


#+BEGIN_SRC dot :file pic02.png :cmdline -Kdot -Tpng
digraph {
rankdir=UD;

"CodeGen script" -> "CodeGen library"
}
#+END_SRC 

#+RESULTS:
[[file:pic02.png]]

